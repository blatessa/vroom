name: Vroom Build

on:
  push:
    branches: [main]
    paths:
      - 'client/**'
  pull_request:
    branches: [main]
    paths:
      - 'client/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev libopencv-dev pkg-config cmake llvm
        env:
          LIBCLANG_PATH: /usr/lib/llvm-10/lib

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install llvm opencv pkg-config cmake
          echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> $GITHUB_ENV
          echo 'export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"' >> $GITHUB_ENV
          echo 'export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"' >> $GITHUB_ENV
          echo 'export LIBCLANG_PATH="/opt/homebrew/opt/llvm/lib"' >> $GITHUB_ENV
          echo 'export DYLD_LIBRARY_PATH="/opt/homebrew/opt/llvm/lib"' >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm cmake 7zip pkgconfiglite
          curl -L -o C:\opencv.exe https://github.com/opencv/opencv/releases/download/4.10.0/opencv-4.10.0-windows.exe
          7z x C:\opencv.exe -oC:\opencv
          echo 'C:\opencv\opencv\build\x64\vc16\bin' | Out-File -Append -FilePath $env:GITHUB_PATH
          echo 'OPENCV_INCLUDE_PATHS=C:\opencv\opencv\build\include' | Out-File -Append -FilePath $env:GITHUB_ENV
          echo 'OPENCV_LINK_PATHS=C:\opencv\opencv\build\x64\vc16\lib' | Out-File -Append -FilePath $env:GITHUB_ENV
          echo 'OPENCV_LINK_LIBS=opencv_world4100' | Out-File -Append -FilePath $env:GITHUB_ENV
          echo 'CMAKE_PREFIX_PATH=C:\opencv\opencv\build' | Out-File -Append -FilePath $env:GITHUB_ENV
          echo 'PKG_CONFIG_PATH=C:\opencv\opencv\build\x64\vc16\lib\pkgconfig' | Out-File -Append -FilePath $env:GITHUB_ENV
          echo 'OpenCV_DIR=C:\opencv\opencv\build' | Out-File -Append -FilePath $env:GITHUB_ENV
        env:
          OPENCV_INCLUDE_PATHS: 'C:\opencv\opencv\build\include'
          OPENCV_LINK_PATHS: 'C:\opencv\opencv\build\x64\vc16\lib'
          OPENCV_LINK_LIBS: 'opencv_world4100'
          OpenCV_DIR: 'C:\opencv\opencv\build'

      - name: Build vroom_client package
        run: cargo build --release --package vroom_client

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: vroom_client-${{ matrix.os }}
          path: target/release/vroom_client

      - name: List build output
        run: ls -la target/release/
        if: success()

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: List Files in Artifacts Directory
        run: ls -R artifacts/

      - name: Debug artifact directories
        run: find artifacts/ -type f -exec ls -l {} \;

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/vroom_client-ubuntu-latest/vroom_client
          asset_name: vroom-linux
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/vroom_client-macos-latest/vroom_client
          asset_name: vroom-macos
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/vroom_client-windows-latest/vroom_client
          asset_name: vroom-windows
          asset_content_type: application/octet-stream